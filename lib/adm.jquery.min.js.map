{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///adm.jquery.min.js","webpack:///webpack/bootstrap 5e81c1bd203248135187","webpack:///./src/adm.jquery.js","webpack:///./src/common/settings.js","webpack:///./src/common/cache-helper.js","webpack:///./src/common/DataCache.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","requestAjax","config","callback","errCallback","fnCB","$p","_cacheHelper","getPromise","_settings2","isJquery","url","console","trace","reject","data","btnWaiting","waiting","dataType","test","search","window","location","host","fnBeforeAjax","item","_typeof","JSON","stringify","fnWaiting","startTime","Date","$","ajax","extend","type","ajaxParam","then","result","success","fnAjaxDone","res","Function","resolve","err","fnAjaxFail","always","getCacheName","isString","cacheName","Object","defineProperty","value","Symbol","iterator","constructor","prototype","_settings","get","_this","cacheData","$promise","getCacheDataByName","fromCache","cache","save","hasOwnProperty","saveTOCache","delete","RegExp","deleteCacheDataByName","getAll","cacheType","cacheStor","getCacheStor","_cache","len","length","i","key","indexOf","cachePrefix","replace","parse","getItem","e","getJSON","arguments","undefined","post","clear","setCachePrefix","prefix","warn","setSettings","setting","errAlert","errMsg","alert","msg","time","code","tipConfig","message","responseText","statusText","slice","status","getTime","t","adjustCacheName","encodeURIComponent","dataCache","undefinedVal","_e","d","removeItem","cfg","log","expires","setItem","text","Deferred","Promise","rs","rj","done","cb","fail","_DataCache","_DataCache2","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","DataCache","index","_index"],"mappings":"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","file":"adm.jquery.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"adm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"adm\"] = factory();\n\telse\n\t\troot[\"adm\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"adm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"adm\"] = factory();\n\telse\n\t\troot[\"adm\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file 全局数据模型 model\n\t * 提供数据的读取、保存/缓存、删除、更新等操作。各模块 model 可继承该模型，以进行模块范围内的数据存取操作。\n\t * @module adm\n\t * @author lzwy0820@qq.com\n\t * @since 2016-03-31\n\t *\n\t * @example\n\t * import adm from 'ajax-data-model';\n\t * const upsModel = $.extend(true, {}, adm, {aa: 'ccc', restapi: {task_type: '/rest/task/type'}});\n\t * // 支持的方法：upsModel.get、upsModel.save、upsModel.delete、upsModel.clear\n\t * // 配置了 url，则都返回 Promise 对象，不管是否缓存\n\t * upsModel.get({url: '/rest/xxx'}).done().fail().then();\n\t * // 保存数据到 localStorage 中\n\t * upsModel.save('appList', [{music: 'test'}], 'localStorage');\n\t * // 通过名字获取，返回存储的数据或者 undefined\n\t * upsModel.get('appList');\n\t * upsModel.get('appList', 'localStorage');\n\t *\n\t * @example\n\t * // 获取 task_type 数据\n\t * const data = {type: 10};\n\t * adm.get({\n\t *     url: upsModel.restapi.task_type,\n\t *     data: data,\n\t *     cache: 'sessionStorage',             // 缓存到 sessionStorage\n\t *     fromCache: 'sessionStorage',         // 获取时优先从 sessionStorage 读取\n\t *     cacheName: 'task_type_' + data.type, // 缓存、从缓存读取时使用的名称\n\t *     expires: 1000 * 60 * 5,              // 数据有效时间为 5 分钟\n\t * }).then((result) => {\n\t *     let taskTypeList = result.value || [];\n\t *     console.log(taskTypeList);\n\t * }, (err) {\n\t *     console.log(err);\n\t * });\n\t */\n\t'use strict';\n\t\n\t// import $ from 'jquery';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _settings = __webpack_require__(2);\n\t\n\tvar _settings2 = _interopRequireDefault(_settings);\n\t\n\tvar _cacheHelper = __webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * ajax 请求通用方法\n\t * @param {Object}   config - 请求参数配置\n\t * @param {String}   config.url - ajax url，必须存在，`config.ajaxParam` 中配置此参数无效\n\t * @param {Object}   config.ajaxParam - ajax 额外参数扩展，如涉及文件上传等\n\t * @param {Object}   config.data - ajax 请求的参数\n\t * @param {Object}   config.waiting - 用于传递给 settings.fnWaiting 方法使用的参数配置\n\t * @param {Object}   config.tipConfig[true] - ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n\t * @param {Object}   config.errAlert[true] - ajax error 时是否给出提示\n\t * @param {Function} callback - ajax 请求成功时回调\n\t * @param {Function} errCallback - ajax 请求失败或 code !== 200 时回调\n\t * @param {Object}   param - 传递给 ajax 请求的额外参数\n\t * @param {Function} fnCB - 请求到数据之后的立即回调方法，用于请求成功后需要前置处理的情况\n\t * @return {Promise}  用于自定义回调处理。\n\t *                    注意：ajax 请求的 done/fail 回调，与 callback/errCallback 可能有区别，具体取决于 fnAjaxDone 与 fnAjaxFail 回调的实现\n\t */\n\tfunction requestAjax(config, callback, errCallback, fnCB) {\n\t    var $p = (0, _cacheHelper.getPromise)(_settings2.default.isJquery);\n\t\n\t    if (!config.url || typeof config.url !== 'string') {\n\t        console.trace('请求 URL API 不存在，或格式不对：', config.url);\n\t        return $p.reject('请求 URL API 不存在，或格式不对：', config.url);\n\t    }\n\t\n\t    // data.btnWaiting 的兼容，应使用 config.waiting 参数\n\t    if (config.data && config.data.btnWaiting) {\n\t        config.waiting = config.waiting || config.data.btnWaiting;\n\t        delete config.data.btnWaiting;\n\t    }\n\t\n\t    // jsonp 兼容\n\t    var dataType = 'json';\n\t\n\t    if (/^https?:\\/\\//.test(config.url) && config.url.search(window.location.host) === -1) {\n\t        dataType = 'jsonp';\n\t    }\n\t\n\t    // 请求前回调，可以引用方式修改 config\n\t    if (_settings2.default.fnBeforeAjax) {\n\t        _settings2.default.fnBeforeAjax(config);\n\t    }\n\t\n\t    // 格式化 config.data\n\t    var item = void 0;\n\t\n\t    if ('object' === _typeof(config.data)) {\n\t        for (item in config.data) {\n\t            if ('string' !== typeof config.data[item]) {\n\t                config.data[item] = JSON.stringify(config.data[item]);\n\t            }\n\t        }\n\t    }\n\t\n\t    // ajax 请求前处理，与请求后处理呼应\n\t    _settings2.default.fnWaiting(config);\n\t\n\t    var startTime = new Date();\n\t\n\t    return $.ajax($.extend(true, {\n\t        type: 'GET',\n\t        dataType: dataType\n\t    }, config.ajaxParam, {\n\t        url: config.url,\n\t        data: config.data\n\t    })).then(function (result) {\n\t        var success = _settings2.default.fnAjaxDone(result, function (res) {\n\t            if (fnCB instanceof Function) {\n\t                fnCB(result);\n\t            }\n\t\n\t            if (callback instanceof Function) {\n\t                callback(res);\n\t            }\n\t        }, errCallback, config);\n\t\n\t        // 为 false，设为失败回调\n\t        if (!success) {\n\t            return $p.reject(result);\n\t        }\n\t\n\t        // 为 true\n\t        if (true === success) {\n\t            return $p.resolve(result);\n\t        }\n\t\n\t        // 为 Promise 风格回调\n\t        if ('function' === typeof success.then) {\n\t            // $p = success;\n\t            // return $p;\n\t            return success;\n\t        }\n\t\n\t        // 为其它类型，返回 success 内容\n\t        return $p.resolve(success);\n\t    }, function (err) {\n\t        _settings2.default.fnAjaxFail(err, config);\n\t\n\t        if (errCallback instanceof Function) {\n\t            errCallback(err);\n\t        }\n\t\n\t        return $p.reject(err);\n\t    }).always(function () {\n\t        // ajax 完成后处理\n\t        _settings2.default.fnWaiting(config, new Date() - startTime);\n\t    });\n\t\n\t    // return $p;\n\t}\n\t\n\t// 获取缓存数据的名称 key\n\tfunction getCacheName(config) {\n\t    // 第一个参数为字符串，则为名称，直接返回 config 作为缓存名称\n\t    if ((0, _cacheHelper.isString)(config) || !config) {\n\t        return config;\n\t    }\n\t\n\t    var cacheName = config.cacheName;\n\t    var data = config.data;\n\t\n\t    if (!cacheName) {\n\t        cacheName = config.url;\n\t\n\t        if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n\t            cacheName += JSON.stringify(data);\n\t        }\n\t    }\n\t\n\t    return cacheName;\n\t}\n\t\n\t/**\n\t * 全局数据模型 model\n\t * @alias module:adm\n\t * @type {Object}\n\t */\n\texports.default = {\n\t    /**\n\t     * 数据获取，可为远程url、缓存等\n\t     * @param {Object} config 为字符串时，从缓存中读取数据，否则为从远程获取数据，参数如下：\n\t     * ```js\n\t     * {\n\t     *     url: '',          // API url 地址，可为空。为空时应存在 cacheName，此时为从缓存中读取数据\n\t     *     data: {},         // url 请求参数\n\t     *     cache: false,     // 配置了 url 获取数据时，是否缓存数据。可取值：`false/true/sessionStorage/localStorage`\n\t     *     fromCache: false, // 配置了 url，是否首先尝试从缓存中读取数据。可取值：`false/true/sessionStorage/localStorage`\n\t     *     cacheName: '',    // 配置了 url 并且 cache 为 true，配置缓存数据的名称，不配置则取值 url (/ 会替换为 . 作为深度路径)\n\t     *     expires: 0,       // 如果 cache 为 true，设置缓存数据的有效期，可为 毫秒数，或 Date 类型日期\n\t     *     tipConfig: {delay: 2000} // ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n\t     *     errAlert: true    // ajax error 时是否给出全局提示，优先级高于 settings.errAlert\n\t     *     waiting: {}       // 按钮等待等配置，用于传递给 settings.fnWaiting 方法\n\t     *     ajaxParam: null   // ajax 额外参数扩展，如涉及文件上传等，需要修改部分参数。其中 url 参数无效，应当使用 config.url\n\t     * }\n\t     * ```\n\t     * @param {Object} callback 成功回调方法\n\t     * @param {Object} errCallback 从 url 获取时，失败后需要做一些处理的回调方法\n\t     * }\n\t     */\n\t    get: function get(config, callback, errCallback) {\n\t        var _this = this;\n\t\n\t        if (!config) {\n\t            return undefined;\n\t        }\n\t\n\t        var cacheData = void 0;\n\t        var $promise = (0, _cacheHelper.getPromise)(_settings2.default.isJquery);\n\t        var cacheName = getCacheName(config);\n\t\n\t        // 配置了 url，从 url 中获取\n\t        if (config.url) {\n\t            cacheData = (0, _cacheHelper.getCacheDataByName)(cacheName, config.fromCache);\n\t\n\t            // fromCache 为 true，尝试从缓存中获取数据\n\t            if (config.fromCache && cacheData) {\n\t                if (typeof callback === 'function') {\n\t                    callback(cacheData);\n\t                }\n\t\n\t                $promise.resolve(cacheData);\n\t                // return cacheData; // 返回数据\n\t                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n\t            }\n\t\n\t            config.ajaxParam = $.extend(config.ajaxParam, {\n\t                type: 'GET'\n\t            });\n\t\n\t            return requestAjax(config, callback, errCallback, function (result) {\n\t                // cache 为 true，缓存数据\n\t                if (config.cache) {\n\t                    _this.save(cacheName, result, config);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了 url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else {\n\t            // 未配置 url，则必须配置 config.cacheName，或者 config 为字符串(作为cacheName)，此时为从缓存中取得数据\n\t            cacheData = (0, _cacheHelper.getCacheDataByName)(cacheName, config.fromCache || callback);\n\t\n\t            if (callback instanceof Function) {\n\t                callback(cacheData);\n\t            }\n\t\n\t            return cacheData;\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 设置/存储数据\n\t     * @param {Object|String} config - 配置信息。也可以为字符串，则为需存储的数据名称。与 {@link module:adm~get} 的 config 参数相同\n\t     * @param {Function|Object} callback - 存储成功后回调方法。当 config 为字符串时，为需存储的数据，或方法执行后返回要存储的数据\n\t     * @param {Function|String} errCallback - 从 url 获取时，失败后需要做一些处理的回调方法。config 为字符串时，为配置信息，如 {cacheType, expires}\n\t     * @example\n\t     * // 存储数据到 localStorage，名称为 testdataName\n\t     * adm.save('testdataName', {test: 1}, 'localStorage');\n\t     * @example\n\t     * // 存储数据到远程，同时存储到 sessionStorage\n\t     * adm.save({url: '/rest/dd', data: {test: 1}, cache: 'sessionStorage'});\n\t     */\n\t    save: function save(config, callback, errCallback) {\n\t        if (!config) {\n\t            return '';\n\t        }\n\t\n\t        var cacheData = void 0;\n\t        var $promise = (0, _cacheHelper.getPromise)(_settings2.default.isJquery);\n\t        var cacheName = getCacheName(config);\n\t\n\t        if ((0, _cacheHelper.isString)(config)) {\n\t            // config 为字符串，则作为cacheName\n\t            if (callback instanceof Function) {\n\t                // 可以存储为回调方法执行后的结果\n\t                (0, _cacheHelper.saveTOCache)(cacheName, callback(), errCallback);\n\t            } else {\n\t                (0, _cacheHelper.saveTOCache)(cacheName, callback, errCallback);\n\t            }\n\t            $promise.resolve(cacheName);\n\t        } else if (config.url) {\n\t            // 配置了 url，将数据存储到远程\n\t            cacheData = (0, _cacheHelper.getCacheDataByName)(cacheName, config.fromCache);\n\t\n\t            // fromCache 为 true，尝试从缓存中获取数据\n\t            if (config.fromCache && cacheData) {\n\t                if (callback instanceof Function) {\n\t                    callback(cacheData);\n\t                }\n\t\n\t                $promise.resolve(cacheData);\n\t                // return cacheData; // 返回数据\n\t                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n\t            }\n\t\n\t            config.ajaxParam = $.extend({\n\t                type: 'POST'\n\t            }, config.ajaxParam);\n\t\n\t            return requestAjax(config, callback, errCallback, function (result) {\n\t                if (config.cache) {\n\t                    // 远程存储成功了，本地也需缓存数据时\n\t                    (0, _cacheHelper.saveTOCache)(cacheName, result, config);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else if (cacheName) {\n\t            // 没有设置 url，但设置了 config.cacheName(此时 cacheName=config.cachename)，则保存数据到本地\n\t            (0, _cacheHelper.saveTOCache)(cacheName, config.data, config);\n\t\n\t            if (callback instanceof Function) {\n\t                callback(cacheData);\n\t            }\n\t            $promise.resolve(config.data);\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 删除一个数据\n\t     * @param {Object} config - 为字符串时，作为 cacheName 尝试从缓存中删除数据。否则格式如下：\n\t     * ```js\n\t     * {\n\t     *     url: '',       // 配置了 url，从远程删除数据，否则从缓存中删除\n\t     *     cache: false,  // 配置了 url，是否还尝试从缓存中删除数据。可取值：false/true/sessionStorage/localStorage\n\t     *     cacheName: ''  // 从缓存中删除数据时，提供其名称。\n\t     * }\n\t     * ```\n\t     */\n\t    delete: function _delete(config, callback, errCallback) {\n\t        if (!config) {\n\t            return '';\n\t        }\n\t\n\t        var $promise = (0, _cacheHelper.getPromise)(_settings2.default.isJquery);\n\t        var cacheName = getCacheName(config);\n\t\n\t        if ((0, _cacheHelper.isString)(config) || config instanceof RegExp) {\n\t            // 第一个参数为字符串或正则，callback 就是 cacheType\n\t            (0, _cacheHelper.deleteCacheDataByName)(config, callback);\n\t            // 删除完成都返回执行成功\n\t            $promise.resolve();\n\t        } else if (config.url) {\n\t            // 配置了 url，从远程删除数据\n\t            return requestAjax(config, callback, errCallback, {\n\t                type: 'DELETE'\n\t            }, function () {\n\t                if (config.cache) {\n\t                    // 远程删除成功了，本地也需清空时\n\t                    (0, _cacheHelper.deleteCacheDataByName)(cacheName, config.cache);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else if (cacheName) {\n\t            (0, _cacheHelper.deleteCacheDataByName)(cacheName, config.cache);\n\t            $promise.resolve();\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 返回所有存储中的所有数据\n\t     * @param  {String} cacheType 存储的类型：sessionStorage、localStorage 或 memory\n\t     * @return {Object}\n\t     */\n\t    getAll: function getAll(cacheType) {\n\t        var cacheStor = (0, _cacheHelper.getCacheStor)(cacheType);\n\t        var _cache = {};\n\t        var len = cacheStor.length;\n\t        var i = void 0;\n\t        var item = void 0,\n\t            key = void 0;\n\t\n\t        for (i = 0; i < len; i++) {\n\t            item = cacheStor.key(i);\n\t\n\t            if (!item || 0 !== item.indexOf(_settings2.default.cachePrefix)) {\n\t                continue;\n\t            }\n\t\n\t            key = item.replace(_settings2.default.cachePrefix, '');\n\t            try {\n\t                _cache[key] = JSON.parse(cacheStor.getItem(item));\n\t            } catch (e) {\n\t                _cache[key] = cacheStor.getItem(item);\n\t            }\n\t        }\n\t\n\t        return _cache;\n\t    },\n\t\n\t    /**\n\t     * {@link module:dataModel.get} 的 ajax 快捷方法\n\t     * @see  module:dataModel.get\n\t     * @param  {String}   url         url 地址\n\t     * @param  {Object}  data        要传递的参数，可省略\n\t     * @param  {Function} callback    成功回调\n\t     * @param  {Function}   errCallback 失败回调\n\t     * @returns {Promise}\n\t     */\n\t    getJSON: function getJSON(url) {\n\t        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t        var callback = arguments[2];\n\t        var errCallback = arguments[3];\n\t\n\t        // data 参数可以省略\n\t        if (data instanceof Function) {\n\t            errCallback = callback;\n\t            callback = data;\n\t            data = void 0;\n\t        }\n\t\n\t        return this.get({\n\t            url: url,\n\t            data: data\n\t        }, callback, errCallback);\n\t    },\n\t\n\t    /**\n\t     * {@link module:dataModel.save} 的 ajax 快捷方法\n\t     * @see  module:dataModel.save\n\t     * @param  {String}   url         url 地址\n\t     * @param  {Object}  data        要传递的参数\n\t     * @param  {Function} callback    成功回调\n\t     * @param  {Function}   errCallback 失败回调\n\t     * @returns {Promise}\n\t     */\n\t    post: function post(url, data, callback, errCallback) {\n\t        return this.save({\n\t            url: url,\n\t            data: data\n\t        }, callback, errCallback);\n\t    },\n\t\n\t    /**\n\t     * 根据存储类型清空存储的所有数据\n\t     * @param  {String} cacheType\n\t     * @return {scope} this\n\t     */\n\t    clear: function clear(cacheType) {\n\t        (0, _cacheHelper.deleteCacheDataByName)(new RegExp('.*'), cacheType);\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * 修改缓存数据的前缀\n\t     * @param {String} prefix           以下划线开头，由字母、数字、或下划线组成\n\t     * @param {Boolean} clear[=true]    修改前缀前，是否移除已有的数据\n\t     */\n\t    setCachePrefix: function setCachePrefix(prefix) {\n\t        var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t        if (!/^_[_a-zA-Z]*_$/.test(prefix)) {\n\t            console.warn('以下划线开头和结尾，由字母、数字、或下划线组成');\n\t            return this;\n\t        }\n\t\n\t        if (clear) {\n\t            this.clear('sessionStorage');\n\t            this.clear('localStorage');\n\t            this.clear();\n\t        }\n\t\n\t        _settings2.default.cachePrefix = prefix;\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * 设置配置项\n\t     * @param {Object} setting\n\t     */\n\t    setSettings: function setSettings(setting) {\n\t        var item = void 0;\n\t\n\t        for (item in setting) {\n\t            if ('cachePrefix' === item) {\n\t                this.setCachePrefix(setting[item], false);\n\t            } else if (_settings2.default.hasOwnProperty(item)) {\n\t                _settings2.default[item] = setting[item];\n\t            }\n\t        }\n\t\n\t        return _settings2.default;\n\t    }\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t * @desc 配置信息，可以通过 `adm.setSettings` 方法修改\n\t * @alias settings\n\t * @type {Object}\n\t */\n\texports.default = {\n\t    cachePrefix: '__DM__', // 缓存数据时使用的前缀，用于区别普通数据\n\t    isJquery: true, // 是否使用 jQuery 的 $.Deferred。为 false 则使用 Promise\n\t    errAlert: true, // ajax 出错时是否全局提示，fnAjaxFail 中使用。全局性开关\n\t    errMsg: '', // 系统错误(40x/50x)时的提示信息，为空则使用 err.responseText\n\t    alert: function alert(msg) {\n\t        // 全局性提示方法注册，可根据项目的 alert 组件进行注册\n\t        console.trace(msg);\n\t        // window.alert(msg);\n\t    },\n\t    /**\n\t     * ajax 开始/结束时回调方法\n\t     * 例如单击按钮后，在开始时禁用按钮，结束时恢复它；\n\t     * 再例如，在 ajax 开始时启用页面动画，结束时关闭页面动画。\n\t     * @param  {Object}  config.waiting - 参数内容可根据 `fnWaiting` 具体的处理来设置\n\t     * @param  {Number} time - 存在值时在 ajax 结束调用，值为 ajax 消耗的时间；省略时在 ajax 开始前被调用\n\t     * @return {void}\n\t     */\n\t    fnWaiting: function fnWaiting(config, time) {\n\t        // const waiting = config.waiting;\n\t        // if ('development' === process.env.NODE_ENV && time) {\n\t        //     console.trace('ajax 请求消耗时间：', time);\n\t        // }\n\t        // if (!waiting) {\n\t        //     return;\n\t        // }\n\t        // more...\n\t    },\n\t\n\t    /**\n\t     * ajax 请求开始前回调方法\n\t     * @param  {Object} config - ajax 请求配置，由于是引用传参，可在这里通过修改它实现 mock 数据等功能\n\t     * @return {void}\n\t     */\n\t    fnBeforeAjax: function fnBeforeAjax(config) {},\n\t\n\t    /**\n\t     * 通用 ajax 请求返回时回调方法\n\t     * 对于基于接口的约定，如这里的示例：以 `code` 为 `200` 认为是成功的数据，否则为出错\n\t     * @param {Object} result - ajax 返回的数据结果\n\t     * @param {Function} callback - 成功回调方法\n\t     * @param {Function} errCallback - 出错回调方法\n\t     * @param {Object} config - ajax 请求参数配置，即 `adm.get/save` 的第一个参数\n\t     * @returns {Boolean|Object|Promise} 表示成功或失败，或成功后返回的数据(如对 result 处理后返回)，或 Promise 风格回调\n\t     */\n\t    fnAjaxDone: function fnAjaxDone(result, callback, errCallback, config) {\n\t        var success = false;\n\t\n\t        if (result && result.code === 200) {\n\t            if (callback) {\n\t                callback(result);\n\t            }\n\t\n\t            // code 200 认为成功，否则认为失败\n\t            success = true;\n\t        } else {\n\t            if (errCallback) {\n\t                errCallback(result);\n\t            }\n\t\n\t            // 全局性系统提示，设置为 false，则不提示，适合由用户自定义错误处理的情况\n\t            if (config.tipConfig !== false) {\n\t                result.message = result.message || '系统错误';\n\t                this.alert(result.message);\n\t            }\n\t        }\n\t\n\t        return success;\n\t    },\n\t\n\t    /**\n\t     * ajax 失败回调方法，一般为 30x、40x、50x 或返回格式不对、网络中断等\n\t     * @param  {Object} err\n\t     * @param  {Object} config\n\t     * @return {void}\n\t     */\n\t    fnAjaxFail: function fnAjaxFail(err, config) {\n\t        var msg = err.responseText || err.statusText || '';\n\t\n\t        if (msg.length > 300) {\n\t            msg = msg.slice(0, 300) + '...';\n\t        }\n\t\n\t        if (0 === err.status) {\n\t            this.alert('登录超时');\n\t            // window.location.reload();\n\t        } else if (config.errAlert || void 0 === config.errAlert && this.errAlert) {\n\t            // errAlert = false 时禁止 40x/50x 等错误的全局提示\n\t            this.alert(config.errMsg || this.errMsg || '数据请求失败: ' + msg);\n\t        }\n\t    }\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n\t                                                                                                                                                                                                                                                                               * cache helper\n\t                                                                                                                                                                                                                                                                               */\n\t\n\t\n\texports.getCacheStor = getCacheStor;\n\texports.getCacheDataByName = getCacheDataByName;\n\texports.deleteCacheDataByName = deleteCacheDataByName;\n\texports.saveTOCache = saveTOCache;\n\texports.isString = isString;\n\texports.getPromise = getPromise;\n\t\n\tvar _settings = __webpack_require__(2);\n\t\n\tvar _settings2 = _interopRequireDefault(_settings);\n\t\n\tvar _DataCache = __webpack_require__(4);\n\t\n\tvar _DataCache2 = _interopRequireDefault(_DataCache);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// 缓存数据对象。为了避免混淆，只缓存至一级结构\n\tvar dataCache = new _DataCache2.default();\n\t\n\t// 获取时间戳\n\tfunction getTime(t) {\n\t    return t ? t.getTime() : new Date().getTime();\n\t}\n\t\n\t/**\n\t * 修正 cacheName\n\t * @param  {String} cacheName 原始的值，可能是任意格式\n\t * @return {String}           修正后的 cacheName，以 cachePrefix 开头\n\t */\n\tfunction adjustCacheName(cacheName) {\n\t    if (!cacheName) {\n\t        return '';\n\t    }\n\t\n\t    cacheName = encodeURIComponent(('' + cacheName).replace(/\\//g, '.').replace(/^\\./, '').replace(/(^\\s+|\\s+$)/g, ''));\n\t    if (cacheName.indexOf(_settings2.default.cachePrefix)) {\n\t        // cacheName.indexOf(settings.cachePrefix) !== 0 加上前缀\n\t        cacheName = _settings2.default.cachePrefix + cacheName;\n\t    }\n\t\n\t    return cacheName;\n\t}\n\t/**\n\t * 根据 cacheType 取得 cacheStorage 对象\n\t * @param  {String} cacheType\n\t * @return {Object}\n\t */\n\tfunction getCacheStor(cacheType) {\n\t    var cacheStor = dataCache;\n\t\n\t    if (~['sessionStorage', 'localStorage'].indexOf(cacheType)) {\n\t        cacheStor = window[cacheType] || cacheStor;\n\t    }\n\t\n\t    return cacheStor;\n\t}\n\t/**\n\t * 根据 cacheName 名称层级获取对应 dataCache 中的缓存数据\n\t * @param  {String} cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group\n\t * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n\t * @return {*}                  返回读取到的数据\n\t */\n\tfunction getCacheDataByName(cacheName, cacheType) {\n\t    var data = void 0;\n\t    var undefinedVal = void 0;\n\t    var cacheStor = getCacheStor(cacheType);\n\t\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return data;\n\t    }\n\t\n\t    data = cacheStor.getItem(cacheName);\n\t    try {\n\t        data = JSON.parse(data);\n\t    } catch (e) {\n\t        data = data;\n\t    }\n\t\n\t    // 缓存的数据设置了有效期 data._e\n\t    if (data && data._e) {\n\t        // console.log(getTime() - data._e, getTime(), data._e);\n\t\n\t        if (getTime() - data._e < 0) {\n\t            return data.d;\n\t        }\n\t        return undefinedVal;\n\t    }\n\t\n\t    return data || undefinedVal;\n\t}\n\t/**\n\t * 根据 cacheName 名称尝试移除缓存中存在的数据\n\t * @param  {String|RegExp}  cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group。支持正则匹配\n\t * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n\t * @return {*}\n\t */\n\tfunction deleteCacheDataByName(cacheName, cacheType) {\n\t    var cacheStor = getCacheStor(cacheType);\n\t    var item = void 0,\n\t        i = void 0,\n\t        len = void 0;\n\t\n\t    // 为正则，支持模糊删除\n\t    if (cacheName instanceof RegExp) {\n\t        len = cacheStor.length;\n\t\n\t        for (i = 0; i < len; i++) {\n\t            item = cacheStor.key(i);\n\t\n\t            if (!item || // 兼容\n\t            item.indexOf(_settings2.default.cachePrefix) !== 0 || // 过滤前缀\n\t            !cacheName.test(item.slice(_settings2.default.cachePrefix.length)) // 规则检测\n\t            ) {\n\t                    continue;\n\t                }\n\t\n\t            // 符合规则，移除\n\t            cacheStor.removeItem(item);\n\t        }\n\t\n\t        return;\n\t    }\n\t\n\t    // 精确的查找与删除\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return;\n\t    }\n\t\n\t    cacheStor.removeItem(cacheName);\n\t}\n\t/**\n\t * 存储数据到本地\n\t * @param {String} cacheName - 用于存储的名称\n\t * @param {*}      data - 任意类型的数据\n\t * @param {String} cacheType - 存储类型，支持三种方式：sessionStorage、localStorage 和内存中(默认)\n\t */\n\tfunction saveTOCache(cacheName, data) {\n\t    var cfg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return;\n\t    }\n\t\n\t    console.log(cacheName, data, cfg);\n\t\n\t    var cacheType = cfg.cache,\n\t        expires = cfg.expires;\n\t\n\t    var cacheStor = getCacheStor(cacheType);\n\t\n\t    // expires 应为毫秒整数\n\t    if (+expires) {\n\t        data = {\n\t            d: data,\n\t            _e: expires instanceof Date ? getTime(expires) : getTime() + expires\n\t        };\n\t    }\n\t\n\t    if (cacheStor === dataCache) {\n\t        // 存到内存 dataCache\n\t        cacheStor.setItem(cacheName, data);\n\t    } else {\n\t        cacheStor.setItem(cacheName, JSON.stringify(data));\n\t    }\n\t}\n\t\n\t/**\n\t * 是否为类字符串\n\t */\n\tfunction isString(text) {\n\t    var type = typeof text === 'undefined' ? 'undefined' : _typeof(text);\n\t\n\t    return 'string' === type || 'number' === type;\n\t}\n\t/**\n\t * 返回包装done/fail API语法糖的 Promise\n\t * @param  {Boolean} isJquery 是否为 jQuery，为true 则返回 $.Deferred\n\t * @return {Promise}\n\t */\n\tfunction getPromise(isJquery) {\n\t    if (isJquery) {\n\t        return $.Deferred();\n\t    }\n\t\n\t    var resolve = void 0,\n\t        reject = void 0;\n\t    var $p = new window.Promise(function (rs, rj) {\n\t        resolve = rs;\n\t        reject = rj;\n\t    });\n\t\n\t    $p.resolve = resolve;\n\t    $p.reject = reject;\n\t\n\t    $p.done = function (cb) {\n\t        return $p.then(cb);\n\t    };\n\t\n\t    $p.fail = function (cb) {\n\t        return $p.then(null, cb);\n\t    };\n\t\n\t    $p.always = function (cb) {\n\t        return $p.then(cb, cb);\n\t    };\n\t\n\t    return $p;\n\t}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @file 基本的数据缓存类\n\t */\n\t\n\t/**\n\t * 内存缓存数据对象类，与 `localStorage` API 保持一致\n\t */\n\tvar DataCache = function () {\n\t    function DataCache() {\n\t        _classCallCheck(this, DataCache);\n\t\n\t        this.length = 0;\n\t        this.cache = {};\n\t    }\n\t    /**\n\t     * 获取值\n\t     * @param  {String} key\n\t     * @return {*}\n\t     */\n\t\n\t\n\t    _createClass(DataCache, [{\n\t        key: \"getItem\",\n\t        value: function getItem(key) {\n\t            return this.cache[key];\n\t        }\n\t        /**\n\t         * 设置值\n\t         * @param {String} key\n\t         * @param {*} value\n\t         */\n\t\n\t    }, {\n\t        key: \"setItem\",\n\t        value: function setItem(key, value) {\n\t            this.cache[key] = value;\n\t            this.length++;\n\t        }\n\t        /**\n\t         * 删除一个值\n\t         * @param  {String} key\n\t         * @return {void}\n\t         */\n\t\n\t    }, {\n\t        key: \"removeItem\",\n\t        value: function removeItem(key) {\n\t            if (this.cache.hasOwnProperty(key)) {\n\t                this.length--;\n\t                delete this.cache[key];\n\t            }\n\t        }\n\t        /**\n\t         * 清空\n\t         */\n\t\n\t    }, {\n\t        key: \"clear\",\n\t        value: function clear() {\n\t            this.length = 0;\n\t            this.cache = {};\n\t        }\n\t        /**\n\t         * 取得第 index 个数的 key\n\t         * @param  {Number} index\n\t         * @return {*}\n\t         */\n\t\n\t    }, {\n\t        key: \"key\",\n\t        value: function key(index) {\n\t            var key = void 0,\n\t                _index = 0;\n\t\n\t            for (key in this.cache) {\n\t                if (index === _index) {\n\t                    return key;\n\t                }\n\t                _index++;\n\t            }\n\t\n\t            return null;\n\t        }\n\t    }]);\n\t\n\t    return DataCache;\n\t}();\n\t\n\texports.default = DataCache;\n\tmodule.exports = exports['default'];\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// adm.jquery.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5e81c1bd203248135187","/**\n * @file 全局数据模型 model\n * 提供数据的读取、保存/缓存、删除、更新等操作。各模块 model 可继承该模型，以进行模块范围内的数据存取操作。\n * @module adm\n * @author lzwy0820@qq.com\n * @since 2016-03-31\n *\n * @example\n * import adm from 'ajax-data-model';\n * const upsModel = $.extend(true, {}, adm, {aa: 'ccc', restapi: {task_type: '/rest/task/type'}});\n * // 支持的方法：upsModel.get、upsModel.save、upsModel.delete、upsModel.clear\n * // 配置了 url，则都返回 Promise 对象，不管是否缓存\n * upsModel.get({url: '/rest/xxx'}).done().fail().then();\n * // 保存数据到 localStorage 中\n * upsModel.save('appList', [{music: 'test'}], 'localStorage');\n * // 通过名字获取，返回存储的数据或者 undefined\n * upsModel.get('appList');\n * upsModel.get('appList', 'localStorage');\n *\n * @example\n * // 获取 task_type 数据\n * const data = {type: 10};\n * adm.get({\n *     url: upsModel.restapi.task_type,\n *     data: data,\n *     cache: 'sessionStorage',             // 缓存到 sessionStorage\n *     fromCache: 'sessionStorage',         // 获取时优先从 sessionStorage 读取\n *     cacheName: 'task_type_' + data.type, // 缓存、从缓存读取时使用的名称\n *     expires: 1000 * 60 * 5,              // 数据有效时间为 5 分钟\n * }).then((result) => {\n *     let taskTypeList = result.value || [];\n *     console.log(taskTypeList);\n * }, (err) {\n *     console.log(err);\n * });\n */\n'use strict';\n\n// import $ from 'jquery';\n\nimport settings from './common/settings';\nimport {\n    getCacheStor,\n    deleteCacheDataByName,\n    getCacheDataByName,\n    saveTOCache,\n    isString,\n    getPromise\n} from './common/cache-helper';\n\n/**\n * ajax 请求通用方法\n * @param {Object}   config - 请求参数配置\n * @param {String}   config.url - ajax url，必须存在，`config.ajaxParam` 中配置此参数无效\n * @param {Object}   config.ajaxParam - ajax 额外参数扩展，如涉及文件上传等\n * @param {Object}   config.data - ajax 请求的参数\n * @param {Object}   config.waiting - 用于传递给 settings.fnWaiting 方法使用的参数配置\n * @param {Object}   config.tipConfig[true] - ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n * @param {Object}   config.errAlert[true] - ajax error 时是否给出提示\n * @param {Function} callback - ajax 请求成功时回调\n * @param {Function} errCallback - ajax 请求失败或 code !== 200 时回调\n * @param {Object}   param - 传递给 ajax 请求的额外参数\n * @param {Function} fnCB - 请求到数据之后的立即回调方法，用于请求成功后需要前置处理的情况\n * @return {Promise}  用于自定义回调处理。\n *                    注意：ajax 请求的 done/fail 回调，与 callback/errCallback 可能有区别，具体取决于 fnAjaxDone 与 fnAjaxFail 回调的实现\n */\nfunction requestAjax(config, callback, errCallback, fnCB) {\n    const $p = getPromise(settings.isJquery);\n\n    if (!config.url || typeof config.url !== 'string') {\n        console.trace('请求 URL API 不存在，或格式不对：', config.url);\n        return $p.reject('请求 URL API 不存在，或格式不对：', config.url);\n    }\n\n    // data.btnWaiting 的兼容，应使用 config.waiting 参数\n    if (config.data && config.data.btnWaiting) {\n        config.waiting = config.waiting || config.data.btnWaiting;\n        delete config.data.btnWaiting;\n    }\n\n    // jsonp 兼容\n    let dataType = 'json';\n\n    if (/^https?:\\/\\//.test(config.url) && config.url.search(window.location.host) === -1) {\n        dataType = 'jsonp';\n    }\n\n    // 请求前回调，可以引用方式修改 config\n    if (settings.fnBeforeAjax) {\n        settings.fnBeforeAjax(config);\n    }\n\n    // 格式化 config.data\n    let item;\n\n    if ('object' === typeof config.data) {\n        for (item in config.data) {\n            if ('string' !== typeof config.data[item]) {\n                config.data[item] = JSON.stringify(config.data[item]);\n            }\n        }\n    }\n\n    // ajax 请求前处理，与请求后处理呼应\n    settings.fnWaiting(config);\n\n    const startTime = new Date();\n\n    return $.ajax($.extend(true, {\n        type: 'GET',\n        dataType\n    }, config.ajaxParam, {\n        url: config.url,\n        data: config.data\n    })).then((result) => {\n        const success = settings.fnAjaxDone(result, (res) => {\n            if (fnCB instanceof Function) {\n                fnCB(result);\n            }\n\n            if (callback instanceof Function) {\n                callback(res);\n            }\n        }, errCallback, config);\n\n        // 为 false，设为失败回调\n        if (!success) {\n            return $p.reject(result);\n        }\n\n        // 为 true\n        if (true === success) {\n            return $p.resolve(result);\n        }\n\n        // 为 Promise 风格回调\n        if ('function' === typeof success.then) {\n            // $p = success;\n            // return $p;\n            return success;\n        }\n\n        // 为其它类型，返回 success 内容\n        return $p.resolve(success);\n    }, (err) => {\n        settings.fnAjaxFail(err, config);\n\n        if (errCallback instanceof Function) {\n            errCallback(err);\n        }\n\n        return $p.reject(err);\n    }).always(() => {\n        // ajax 完成后处理\n        settings.fnWaiting(config, new Date() - startTime);\n    });\n\n    // return $p;\n}\n\n// 获取缓存数据的名称 key\nfunction getCacheName(config) {\n    // 第一个参数为字符串，则为名称，直接返回 config 作为缓存名称\n    if (isString(config) || !config) {\n        return config;\n    }\n\n    let cacheName = config.cacheName;\n    const data = config.data;\n\n    if (!cacheName) {\n        cacheName = config.url;\n\n        if (typeof data === 'object') {\n            cacheName += JSON.stringify(data);\n        }\n    }\n\n    return cacheName;\n}\n\n/**\n * 全局数据模型 model\n * @alias module:adm\n * @type {Object}\n */\nexport default {\n    /**\n     * 数据获取，可为远程url、缓存等\n     * @param {Object} config 为字符串时，从缓存中读取数据，否则为从远程获取数据，参数如下：\n     * ```js\n     * {\n     *     url: '',          // API url 地址，可为空。为空时应存在 cacheName，此时为从缓存中读取数据\n     *     data: {},         // url 请求参数\n     *     cache: false,     // 配置了 url 获取数据时，是否缓存数据。可取值：`false/true/sessionStorage/localStorage`\n     *     fromCache: false, // 配置了 url，是否首先尝试从缓存中读取数据。可取值：`false/true/sessionStorage/localStorage`\n     *     cacheName: '',    // 配置了 url 并且 cache 为 true，配置缓存数据的名称，不配置则取值 url (/ 会替换为 . 作为深度路径)\n     *     expires: 0,       // 如果 cache 为 true，设置缓存数据的有效期，可为 毫秒数，或 Date 类型日期\n     *     tipConfig: {delay: 2000} // ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n     *     errAlert: true    // ajax error 时是否给出全局提示，优先级高于 settings.errAlert\n     *     waiting: {}       // 按钮等待等配置，用于传递给 settings.fnWaiting 方法\n     *     ajaxParam: null   // ajax 额外参数扩展，如涉及文件上传等，需要修改部分参数。其中 url 参数无效，应当使用 config.url\n     * }\n     * ```\n     * @param {Object} callback 成功回调方法\n     * @param {Object} errCallback 从 url 获取时，失败后需要做一些处理的回调方法\n     * }\n     */\n    get(config, callback, errCallback) {\n        if (!config) {\n            return undefined;\n        }\n\n        let cacheData;\n        const $promise = getPromise(settings.isJquery);\n        const cacheName = getCacheName(config);\n\n        // 配置了 url，从 url 中获取\n        if (config.url) {\n            cacheData = getCacheDataByName(cacheName, config.fromCache);\n\n            // fromCache 为 true，尝试从缓存中获取数据\n            if (config.fromCache && cacheData) {\n                if (typeof callback === 'function') {\n                    callback(cacheData);\n                }\n\n                $promise.resolve(cacheData);\n                // return cacheData; // 返回数据\n                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n            }\n\n            config.ajaxParam = $.extend(config.ajaxParam, {\n                type: 'GET'\n            });\n\n            return requestAjax(config, callback, errCallback, (result) => {\n                // cache 为 true，缓存数据\n                if (config.cache) {\n                    this.save(cacheName, result, config);\n                }\n            });\n        } else if (config.hasOwnProperty('url')) { // 配置了 url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else {\n            // 未配置 url，则必须配置 config.cacheName，或者 config 为字符串(作为cacheName)，此时为从缓存中取得数据\n            cacheData = getCacheDataByName(cacheName, config.fromCache || callback);\n\n            if (callback instanceof Function) {\n                callback(cacheData);\n            }\n\n            return cacheData;\n        }\n\n        return $promise;\n    },\n    /**\n     * 设置/存储数据\n     * @param {Object|String} config - 配置信息。也可以为字符串，则为需存储的数据名称。与 {@link module:adm~get} 的 config 参数相同\n     * @param {Function|Object} callback - 存储成功后回调方法。当 config 为字符串时，为需存储的数据，或方法执行后返回要存储的数据\n     * @param {Function|String} errCallback - 从 url 获取时，失败后需要做一些处理的回调方法。config 为字符串时，为配置信息，如 {cacheType, expires}\n     * @example\n     * // 存储数据到 localStorage，名称为 testdataName\n     * adm.save('testdataName', {test: 1}, 'localStorage');\n     * @example\n     * // 存储数据到远程，同时存储到 sessionStorage\n     * adm.save({url: '/rest/dd', data: {test: 1}, cache: 'sessionStorage'});\n     */\n    save(config, callback, errCallback) {\n        if (!config) {\n            return '';\n        }\n\n        let cacheData;\n        const $promise = getPromise(settings.isJquery);\n        const cacheName = getCacheName(config);\n\n        if (isString(config)) { // config 为字符串，则作为cacheName\n            if (callback instanceof Function) { // 可以存储为回调方法执行后的结果\n                saveTOCache(cacheName, callback(), errCallback);\n            } else {\n                saveTOCache(cacheName, callback, errCallback);\n            }\n            $promise.resolve(cacheName);\n        } else if (config.url) { // 配置了 url，将数据存储到远程\n            cacheData = getCacheDataByName(cacheName, config.fromCache);\n\n            // fromCache 为 true，尝试从缓存中获取数据\n            if (config.fromCache && cacheData) {\n                if (callback instanceof Function) {\n                    callback(cacheData);\n                }\n\n                $promise.resolve(cacheData);\n                // return cacheData; // 返回数据\n                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n            }\n\n            config.ajaxParam = $.extend({\n                type: 'POST'\n            }, config.ajaxParam);\n\n            return requestAjax(config, callback, errCallback, (result) => {\n                if (config.cache) {\n                    // 远程存储成功了，本地也需缓存数据时\n                    saveTOCache(cacheName, result, config);\n                }\n            });\n        } else if (config.hasOwnProperty('url')) { // 配置了url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else if (cacheName) { // 没有设置 url，但设置了 config.cacheName(此时 cacheName=config.cachename)，则保存数据到本地\n            saveTOCache(cacheName, config.data, config);\n\n            if (callback instanceof Function) {\n                callback(cacheData);\n            }\n            $promise.resolve(config.data);\n        }\n\n        return $promise;\n    },\n    /**\n     * 删除一个数据\n     * @param {Object} config - 为字符串时，作为 cacheName 尝试从缓存中删除数据。否则格式如下：\n     * ```js\n     * {\n     *     url: '',       // 配置了 url，从远程删除数据，否则从缓存中删除\n     *     cache: false,  // 配置了 url，是否还尝试从缓存中删除数据。可取值：false/true/sessionStorage/localStorage\n     *     cacheName: ''  // 从缓存中删除数据时，提供其名称。\n     * }\n     * ```\n     */\n    delete(config, callback, errCallback) {\n        if (!config) {\n            return '';\n        }\n\n        const $promise = getPromise(settings.isJquery);\n        const cacheName = getCacheName(config);\n\n        if (isString(config) || config instanceof RegExp) {\n            // 第一个参数为字符串或正则，callback 就是 cacheType\n            deleteCacheDataByName(config, callback);\n            // 删除完成都返回执行成功\n            $promise.resolve();\n        } else if (config.url) {\n            // 配置了 url，从远程删除数据\n            return requestAjax(config, callback, errCallback, {\n                type: 'DELETE'\n            }, () => {\n                if (config.cache) {\n                    // 远程删除成功了，本地也需清空时\n                    deleteCacheDataByName(cacheName, config.cache);\n                }\n            });\n        } else if (config.hasOwnProperty('url')) { // 配置了url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else if (cacheName) {\n            deleteCacheDataByName(cacheName, config.cache);\n            $promise.resolve();\n        }\n\n        return $promise;\n    },\n    /**\n     * 返回所有存储中的所有数据\n     * @param  {String} cacheType 存储的类型：sessionStorage、localStorage 或 memory\n     * @return {Object}\n     */\n    getAll(cacheType) {\n        const cacheStor = getCacheStor(cacheType);\n        const _cache = {};\n        const len = cacheStor.length;\n        let i;\n        let item, key;\n\n        for (i = 0; i < len; i++) {\n            item = cacheStor.key(i);\n\n            if (!item || 0 !== item.indexOf(settings.cachePrefix)) {\n                continue;\n            }\n\n            key = item.replace(settings.cachePrefix, '');\n            try {\n                _cache[key] = JSON.parse(cacheStor.getItem(item));\n            } catch (e) {\n                _cache[key] = cacheStor.getItem(item);\n            }\n        }\n\n        return _cache;\n    },\n    /**\n     * {@link module:dataModel.get} 的 ajax 快捷方法\n     * @see  module:dataModel.get\n     * @param  {String}   url         url 地址\n     * @param  {Object}  data        要传递的参数，可省略\n     * @param  {Function} callback    成功回调\n     * @param  {Function}   errCallback 失败回调\n     * @returns {Promise}\n     */\n    getJSON(url, data = {}, callback, errCallback) {\n        // data 参数可以省略\n        if (data instanceof Function) {\n            errCallback = callback;\n            callback = data;\n            data = void 0;\n        }\n\n        return this.get({\n            url,\n            data\n        }, callback, errCallback);\n    },\n    /**\n     * {@link module:dataModel.save} 的 ajax 快捷方法\n     * @see  module:dataModel.save\n     * @param  {String}   url         url 地址\n     * @param  {Object}  data        要传递的参数\n     * @param  {Function} callback    成功回调\n     * @param  {Function}   errCallback 失败回调\n     * @returns {Promise}\n     */\n    post(url, data, callback, errCallback) {\n        return this.save({\n            url,\n            data\n        }, callback, errCallback);\n    },\n    /**\n     * 根据存储类型清空存储的所有数据\n     * @param  {String} cacheType\n     * @return {scope} this\n     */\n    clear(cacheType) {\n        deleteCacheDataByName(new RegExp('.*'), cacheType);\n\n        return this;\n    },\n    /**\n     * 修改缓存数据的前缀\n     * @param {String} prefix           以下划线开头，由字母、数字、或下划线组成\n     * @param {Boolean} clear[=true]    修改前缀前，是否移除已有的数据\n     */\n    setCachePrefix(prefix, clear = true) {\n        if (!/^_[_a-zA-Z]*_$/.test(prefix)) {\n            console.warn('以下划线开头和结尾，由字母、数字、或下划线组成');\n            return this;\n        }\n\n        if (clear) {\n            this.clear('sessionStorage');\n            this.clear('localStorage');\n            this.clear();\n        }\n\n        settings.cachePrefix = prefix;\n\n        return this;\n    },\n    /**\n     * 设置配置项\n     * @param {Object} setting\n     */\n    setSettings(setting) {\n        let item;\n\n        for (item in setting) {\n            if ('cachePrefix' === item) {\n                this.setCachePrefix(setting[item], false);\n            } else if (settings.hasOwnProperty(item)) {\n                settings[item] = setting[item];\n            }\n        }\n\n        return settings;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/adm.jquery.js","/**\n * @desc 配置信息，可以通过 `adm.setSettings` 方法修改\n * @alias settings\n * @type {Object}\n */\nexport default {\n    cachePrefix: '__DM__', // 缓存数据时使用的前缀，用于区别普通数据\n    isJquery: true, // 是否使用 jQuery 的 $.Deferred。为 false 则使用 Promise\n    errAlert: true, // ajax 出错时是否全局提示，fnAjaxFail 中使用。全局性开关\n    errMsg: '',     // 系统错误(40x/50x)时的提示信息，为空则使用 err.responseText\n    alert: (msg) => { // 全局性提示方法注册，可根据项目的 alert 组件进行注册\n        console.trace(msg);\n        // window.alert(msg);\n    },\n    /**\n     * ajax 开始/结束时回调方法\n     * 例如单击按钮后，在开始时禁用按钮，结束时恢复它；\n     * 再例如，在 ajax 开始时启用页面动画，结束时关闭页面动画。\n     * @param  {Object}  config.waiting - 参数内容可根据 `fnWaiting` 具体的处理来设置\n     * @param  {Number} time - 存在值时在 ajax 结束调用，值为 ajax 消耗的时间；省略时在 ajax 开始前被调用\n     * @return {void}\n     */\n    fnWaiting(config, time) {\n        // const waiting = config.waiting;\n        // if ('development' === process.env.NODE_ENV && time) {\n        //     console.trace('ajax 请求消耗时间：', time);\n        // }\n        // if (!waiting) {\n        //     return;\n        // }\n        // more...\n    },\n    /**\n     * ajax 请求开始前回调方法\n     * @param  {Object} config - ajax 请求配置，由于是引用传参，可在这里通过修改它实现 mock 数据等功能\n     * @return {void}\n     */\n    fnBeforeAjax(config) {},\n    /**\n     * 通用 ajax 请求返回时回调方法\n     * 对于基于接口的约定，如这里的示例：以 `code` 为 `200` 认为是成功的数据，否则为出错\n     * @param {Object} result - ajax 返回的数据结果\n     * @param {Function} callback - 成功回调方法\n     * @param {Function} errCallback - 出错回调方法\n     * @param {Object} config - ajax 请求参数配置，即 `adm.get/save` 的第一个参数\n     * @returns {Boolean|Object|Promise} 表示成功或失败，或成功后返回的数据(如对 result 处理后返回)，或 Promise 风格回调\n     */\n    fnAjaxDone(result, callback, errCallback, config) {\n        let success = false;\n\n        if (result && result.code === 200) {\n            if (callback) {\n                callback(result);\n            }\n\n            // code 200 认为成功，否则认为失败\n            success = true;\n        } else {\n            if (errCallback) {\n                errCallback(result);\n            }\n\n            // 全局性系统提示，设置为 false，则不提示，适合由用户自定义错误处理的情况\n            if (config.tipConfig !== false) {\n                result.message = result.message || '系统错误';\n                this.alert(result.message);\n            }\n        }\n\n        return success;\n    },\n    /**\n     * ajax 失败回调方法，一般为 30x、40x、50x 或返回格式不对、网络中断等\n     * @param  {Object} err\n     * @param  {Object} config\n     * @return {void}\n     */\n    fnAjaxFail(err, config) {\n        let msg = err.responseText || err.statusText || '';\n\n        if (msg.length > 300) {\n            msg = msg.slice(0, 300) + '...';\n        }\n\n        if (0 === err.status) {\n            this.alert('登录超时');\n            // window.location.reload();\n        } else if (config.errAlert || (void 0) === config.errAlert && this.errAlert) {\n            // errAlert = false 时禁止 40x/50x 等错误的全局提示\n            this.alert(config.errMsg || this.errMsg || ('数据请求失败: ' + msg));\n        }\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/settings.js","/**\n * cache helper\n */\nimport settings from './settings';\nimport DataCache from './DataCache';\n\n// 缓存数据对象。为了避免混淆，只缓存至一级结构\nconst dataCache = new DataCache();\n\n// 获取时间戳\nfunction getTime(t) {\n    return t ? t.getTime() : (new Date()).getTime();\n}\n\n/**\n * 修正 cacheName\n * @param  {String} cacheName 原始的值，可能是任意格式\n * @return {String}           修正后的 cacheName，以 cachePrefix 开头\n */\nfunction adjustCacheName(cacheName) {\n    if (!cacheName) {\n        return '';\n    }\n\n    cacheName = encodeURIComponent(('' + cacheName).replace(/\\//g, '.').replace(/^\\./, '').replace(/(^\\s+|\\s+$)/g, ''));\n    if (cacheName.indexOf(settings.cachePrefix)) {\n        // cacheName.indexOf(settings.cachePrefix) !== 0 加上前缀\n        cacheName = settings.cachePrefix + cacheName;\n    }\n\n    return cacheName;\n}\n/**\n * 根据 cacheType 取得 cacheStorage 对象\n * @param  {String} cacheType\n * @return {Object}\n */\nexport function getCacheStor(cacheType) {\n    let cacheStor = dataCache;\n\n    if (~['sessionStorage', 'localStorage'].indexOf(cacheType)) {\n        cacheStor = window[cacheType] || cacheStor;\n    }\n\n    return cacheStor;\n}\n/**\n * 根据 cacheName 名称层级获取对应 dataCache 中的缓存数据\n * @param  {String} cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group\n * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n * @return {*}                  返回读取到的数据\n */\nexport function getCacheDataByName(cacheName, cacheType) {\n    let data;\n    const undefinedVal = void 0;\n    const cacheStor = getCacheStor(cacheType);\n\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return data;\n    }\n\n    data = cacheStor.getItem(cacheName);\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        data = data;\n    }\n\n    // 缓存的数据设置了有效期 data._e\n    if (data && data._e) {\n        // console.log(getTime() - data._e, getTime(), data._e);\n\n        if (getTime() - data._e < 0) {\n            return data.d;\n        }\n        return undefinedVal;\n    }\n\n    return data || undefinedVal;\n}\n/**\n * 根据 cacheName 名称尝试移除缓存中存在的数据\n * @param  {String|RegExp}  cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group。支持正则匹配\n * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n * @return {*}\n */\nexport function deleteCacheDataByName(cacheName, cacheType) {\n    const cacheStor = getCacheStor(cacheType);\n    let item,\n        i,\n        len;\n\n    // 为正则，支持模糊删除\n    if (cacheName instanceof RegExp) {\n        len = cacheStor.length;\n\n        for (i = 0; i < len; i++) {\n            item = cacheStor.key(i);\n\n            if (\n                !item || // 兼容\n                item.indexOf(settings.cachePrefix) !== 0 || // 过滤前缀\n                !cacheName.test(item.slice(settings.cachePrefix.length)) // 规则检测\n            ) {\n                continue;\n            }\n\n            // 符合规则，移除\n            cacheStor.removeItem(item);\n        }\n\n        return;\n    }\n\n    // 精确的查找与删除\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return;\n    }\n\n    cacheStor.removeItem(cacheName);\n}\n/**\n * 存储数据到本地\n * @param {String} cacheName - 用于存储的名称\n * @param {*}      data - 任意类型的数据\n * @param {String} cacheType - 存储类型，支持三种方式：sessionStorage、localStorage 和内存中(默认)\n */\nexport function saveTOCache(cacheName, data, cfg = {}) {\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return;\n    }\n\n    console.log(cacheName, data, cfg);\n\n    const {cache: cacheType, expires} = cfg;\n    const cacheStor = getCacheStor(cacheType);\n\n    // expires 应为毫秒整数\n    if (+expires) {\n        data = {\n            d: data,\n            _e: (expires instanceof Date) ? getTime(expires) : (getTime() + expires)\n        };\n    }\n\n    if (cacheStor === dataCache) {\n        // 存到内存 dataCache\n        cacheStor.setItem(cacheName, data);\n    } else {\n        cacheStor.setItem(cacheName, JSON.stringify(data));\n    }\n}\n\n/**\n * 是否为类字符串\n */\nexport function isString(text) {\n    const type = typeof text;\n\n    return 'string' === type || 'number' === type;\n}\n/**\n * 返回包装done/fail API语法糖的 Promise\n * @param  {Boolean} isJquery 是否为 jQuery，为true 则返回 $.Deferred\n * @return {Promise}\n */\nexport function getPromise(isJquery) {\n    if (isJquery) {\n        return $.Deferred();\n    }\n\n    let resolve, reject;\n    const $p = new window.Promise((rs, rj) => {\n        resolve = rs;\n        reject = rj;\n    });\n\n    $p.resolve = resolve;\n    $p.reject = reject;\n\n    $p.done = function (cb) {\n        return $p.then(cb);\n    };\n\n    $p.fail = function (cb) {\n        return $p.then(null, cb);\n    };\n\n    $p.always = function (cb) {\n        return $p.then(cb, cb);\n    };\n\n    return $p;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/cache-helper.js","/**\n * @file 基本的数据缓存类\n */\n\n/**\n * 内存缓存数据对象类，与 `localStorage` API 保持一致\n */\nclass DataCache {\n    constructor() {\n        this.length = 0;\n        this.cache = {};\n    }\n    /**\n     * 获取值\n     * @param  {String} key\n     * @return {*}\n     */\n    getItem(key) {\n        return this.cache[key];\n    }\n    /**\n     * 设置值\n     * @param {String} key\n     * @param {*} value\n     */\n    setItem(key, value) {\n        this.cache[key] = value;\n        this.length++;\n    }\n    /**\n     * 删除一个值\n     * @param  {String} key\n     * @return {void}\n     */\n    removeItem(key) {\n        if (this.cache.hasOwnProperty(key)) {\n            this.length--;\n            delete this.cache[key];\n        }\n    }\n    /**\n     * 清空\n     */\n    clear() {\n        this.length = 0;\n        this.cache = {};\n    }\n    /**\n     * 取得第 index 个数的 key\n     * @param  {Number} index\n     * @return {*}\n     */\n    key(index) {\n        let key, _index = 0;\n\n        for (key in this.cache) {\n            if (index === _index) {\n                return key;\n            }\n            _index++;\n        }\n\n        return null;\n    }\n}\n\nexport default DataCache;\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/DataCache.js"],"sourceRoot":""}